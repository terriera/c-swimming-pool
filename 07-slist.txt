Date de Rendu:		02/10/2002 à 08:00
Groupe de News:         epita.cours.c-unix.mini-projs
Répertoire de Rendu:    ~/c/rendu/piscine/j6
Droits:                 701 pour ~
			705 pour les autres répertoires
                        604 pour les fichiers de ~/c/rendu/piscine/j6
Ne pas oublier:         Lire le sujet jusqu'au bout.
			Aider  vos  camarades   en  leur  donnant  des
			explications,  mais  sans  travailler  à  leur
			place.

--------------------------------
 IMPORTANT : MODALITES DE RENDU
--------------------------------

Tous  les  fichiers  .c   du  répertoire  seront  ramassés  par  notre
moulinette donc prenez garde aux points suivants :
- Ne  placez  surtout  pas de  code  qui  ne  compile pas  dans  votre
  répertoire de rendu.
- Aucune fonction ne doit se trouver en double dans vos fichiers.
- Aucune  fonction  main()  ne  devra  se trouver  dans  les  fichiers
  que vous rendez.

De plus :
- Les sources doivent compiler avec `gcc -Wall' sans warning.
- Vous devez  déclarer vos  structures et le  prototype de  toutes vos
  fonctions dans le fichier slist.h.

----------------------
 FONCTIONS AUTORISEES
----------------------

Vous avez le droit à toutes les structures de contrôle du C autorisées
par la norme ainsi que malloc(), free() et exit(). Rien d'autre.

Vous êtes bien sur libres d'utiliser my_putchar() et même write() pour
vos tests, MAIS PAS dans les fonctions que vous rendez.

---------------------
 SINGLY-LINKED-LISTS
---------------------

Name
----

Singly-Linked  Lists  -- linked  lists  containing  pointers to  data,
limited to iterating over the list in one direction.

Synopsis
--------

struct      s_slist
{
  struct s_slist *next;
  void           *data;
};
typedef struct s_slist t_slist;

t_slist		*my_slist_alloc(void);
t_slist		*my_slist_append(t_slist *list, void *data);
t_slist		*my_slist_prepend(t_slist *list, void *data);
t_slist		*my_slist_insert(t_slist *list, void *data, int position);
t_slist		*my_slist_remove(t_slist *list, void *data);
t_slist		*my_slist_remove_link(t_slist *list, t_slist *llink);
void		my_slist_free(t_slist *list);
void		my_slist_free_1(t_slist *list);
unsigned int	my_slist_length(t_slist *list);
t_slist		*my_slist_copy(t_slist *list);
t_slist		*my_slist_reverse(t_slist *list);
t_slist		*my_slist_concat(t_slist *list1, t_slist *list2);
t_slist		*my_slist_last(t_slist *list);
t_slist		*my_slist_next(t_slist *list);
t_slist		*my_slist_nth(t_slist *list, unsigned int n);
void		*my_slist_nth_data(t_slist *list, unsigned int n);
t_slist		*my_slist_find(t_slist *list, void *data);
int		my_slist_position(t_slist *list, t_slist *llink);
int		my_slist_index(t_slist *list, void *data);

Description
-----------

The s_slist structure and  its associated functions provide a standard
singly-linked list data structure.

Each element  in the list  contains a piece  of data, together  with a
pointer  which links  to  the next  element  in the  list. Using  this
pointer it is possible to move  through the list in one direction only
(unlike  the   Doubly-Linked  Lists  which  allow   movement  in  both
directions). The  data contained in  each element are pointers  to any
type of data.

Note  that most  of the  singly-linked  lists functions  expect to  be
passed a pointer to the first element in the list. The functions which
insert  elements return  the new  start of  the list,  which  may have
changed.

There  is  no  function  to  create  a  singly-linked  list.  NULL  is
considered to be the empty list so you simply set a t_slist * to NULL.

To  add   elements,  use  my_slist_append(),   my_slist_prepend()  and
my_slist_insert().

To remove elements, use my_slist_remove().

To  find elements  in the  list use  my_slist_last(), my_slist_next(),
my_slist_nth(), my_slist_nth_data() and my_slist_find().

To  find   the  index  of  an  element   use  my_slist_position()  and
my_slist_index().

To free the entire list, use my_slist_free().

Details
-------

struct s_slist
{
  void	  *data;
  t_slist *next;
};

The  s_slist struct  is used  for  each element  in the  singly-linked
list. The /data/ field holds the element's data, which is a pointer to
any  kind of  data. The  /next/ field  contains the  link to  the next
element in the list.

------------------------------------------------------------------------

	my_slist_alloc()

t_slist		*my_slist_alloc(void);

Allocates  space  for  one  t_slist  element.  It  is  called  by  the
my_slist_append(), my_slist_prepend()  and my_slist_insert() functions
and so is rarely used on its own.

Returns : a pointer to the newly-allocated t_slist element.

------------------------------------------------------------------------

	my_slist_append()

t_slist		*my_slist_append(t_slist  *list, void *data);

Adds a new element on to the end of the list.

    *Note: *The return value is the new start of the list, which may
    have changed, so make sure you store the new value.

  /* Notice that these are initialized to the empty list. */
  t_slist *list = NULL;

  /* This is a list of strings. */
  list = my_slist_append (list, "first");
  list = my_slist_append (list, "second");

/list/ : a singly-linked list.
/data/ : the data for the new element.

Returns : the new start of the t_slist

------------------------------------------------------------------------

      my_slist_prepend()

t_slist		*my_slist_prepend(t_slist *list, void *data);

Adds a new element on to the start of the list.

    *Note: *The return value is the new start of the list, which may
    have changed, so make sure you store the new value.

  /* Notice that it is initialized to the empty list. */
  t_slist *list = NULL;
  list = my_slist_prepend (list, "last");
  list = my_slist_prepend (list, "first");

/list/ : a singly-linked list.
/data/ : the data for the new element.

Returns : the new start of the singly-linked list.

------------------------------------------------------------------------

      my_slist_insert()

t_slist		*my_slist_insert(t_slist  *list,
                                 void *data,
                                 int  position);

Inserts a new element into the list at the given position.

/list/ : a singly-linked list.
/data/ : the data for the new element.
/position/ : the position to insert the element. If this is negative,
or is larger than the number of elements in the list, the new element
is added on to the end of the list. The position 0 corresponds to the 
start of the list.

Returns : the new start of the singly-linked list

------------------------------------------------------------------------

      my_slist_remove()

t_slist		*my_slist_remove(t_slist *list, void *data);

Removes an element from a singly-linked list.  If two elements contain
the same  data, only  the first  is removed. If  none of  the elements
contain the data, the singly-linked list is unchanged.

/list/ : a singly-linked list .
/data/ : the data of the element to remove.

Returns : the new start of the singly-linked list

------------------------------------------------------------------------

      my_slist_remove_link()

t_slist		*my_slist_remove_link(t_slist *list, t_slist *llink);

Removes  an element  from a  singly-linked list,  without  freeing the
element. The  removed element's next link  is set to NULL,  so that it
becomes a self-contained list with one element.

/list/ : a singly-linked list.
/llink/ : an element in the singly-linked list.

Returns : the new start of the singly-linked list, without the element.

------------------------------------------------------------------------

      my_slist_free()

void		my_slist_free(t_slist *list);

Frees all of the memory used by a singly-linked list.

/list/ : a singly-linked list.

------------------------------------------------------------------------

      my_slist_free_1()

void		my_slist_free_1(t_slist *list);

Frees  one  singly-linked list  element.   It  is  usually used  after
my_slist_remove_link().

/list/ : a singly-linked list  element.

------------------------------------------------------------------------

      my_slist_length()

unsigned int	my_slist_length(t_slist *list);

Gets the number of elements in a singly-linked list.

/list/ : a singly-linked list.

Returns : the number of elements in the singly-linked list

------------------------------------------------------------------------

      my_slist_copy()

t_slist		*my_slist_copy(t_slist *list);

Copies a singly-linked list.

Note that  this is a "shallow"  copy. If the list  elements consist of
pointers to data, the pointers are copied but the actual data isn't.

/list/ : a singly-linked list.

Returns : a copy of /list/.

------------------------------------------------------------------------

      my_slist_reverse()

t_slist		*my_slist_reverse(t_slist  *list);

Reverses a singly-linked list.

/list/ : a singly-linked list.

Returns : the start of the reversed singly-linked list

------------------------------------------------------------------------

      my_slist_concat()

t_slist		*my_slist_concat(t_slist *list1, t_slist  *list2);

Adds  the  second  singly-linked  list  onto  the  end  of  the  first
singly-linked   list.   Note  that   the   elements   of  the   second
singly-linked list are not copied. They are used directly.

/list1/ : a singly-linked list.
/list2/  : the  singly-linked list  to  add to  the end  of the  first
singly-linked list.

Returns : the start of the new singly-linked list

------------------------------------------------------------------------

      my_slist_last()

t_slist		*my_slist_last(t_slist  *list);

Gets the last element in a singly-linked list.

/list/ : a singly-linked list.

Returns : the  last element in the singly-linked list,  or NULL if the
singly-linked list has no elements.

------------------------------------------------------------------------

      my_slist_next()

t_slist		*my_slist_next(t_slist *list);

Gets the next element in a singly-linked list.

/slist/ : an element in a singly-linked list.

Returns : the next element, or NULL if there are no more elements.

------------------------------------------------------------------------

      my_slist_nth()

t_slist		*my_slist_nth(t_slist *list, unsigned int n);

Gets the element at the given position in a singly-linked list.

/list/ : a singly-linked list .
/n/ : the position of the element, counting from 0.

Returns : the element,  or NULL if the position is off  the end of the
singly-linked list.

------------------------------------------------------------------------

      my_slist_nth_data()

void		*my_slist_nth_data(t_slist *list, unsigned int  n);

Gets the data of the element at the given position.

/list/ : a singly-linked list.
/n/ : the position of the element.

Returns : the  element's data, or NULL if the position  is off the end
of the singly-linked list.

------------------------------------------------------------------------

      my_slist_find()

t_slist		*my_slist_find(t_slist *list, void *data);

Finds the  element in  a singly-linked list  which contains  the given
data.

/list/ : a singly-linked list.
/data/ : the element data to find.

Returns : the  found singly-linked list element, or NULL  if it is not
found.

------------------------------------------------------------------------

      my_slist_position()

int		my_slist_position(t_slist *list, t_slist *llink);

Gets  the position  of the  given  element in  the singly-linked  list
(starting from 0).

/list/ : a singly-linked list.
/llink/ : an element in the singly-linked list.

Returns : the  position of the element in the  singly-linked list , or
-1 if the element is not found.

------------------------------------------------------------------------

      my_slist_index()

int		my_slist_index(t_slist *list, void *data);

Gets the position  of the element containing the  given data (starting
from 0).

/list/ : a singly-linked list .
/data/ : the data to find.

Returns : the  index of the element containing the data,  or -1 if the
data is not found.


=========================================================================
FAQ


0. Q Dans la fonction my_dlist_remove_link(), que faire si l'element a
     supprimer n'existe pas dans la liste (ie. l'element fait peut-etre
     partie d'une autre liste) ?

   R On ne supprime rien dans la premiere liste, ni dans la deuxieme.


1. Q Etant donne que la liste peut-etre accedee par n'importe quel element
     de celle-ci, puis-je retourner n'importe quel element en guise de valeur
     de retour ?

   R Non, vous devez toujours retourner le debut de la liste.


2. Q Dans la fonction my_dlist_insert_sorted(), si la fonction de comparaison
     retourne 0, c'est a dire que l'element est deja dans la liste, dois-je
     tout de meme l'ajouter ?

   R Oui, charge au programmeur qui utilise votre librairie d'autoriser les
     doublons, ou non.

3. Q Dans la fonction my_dlist_foreach(), en quelle position user_data doit-
     il etre passe a la fonction func ?

   R En deuxieme position, le premier parametre de func sera le champ data.


4. Q Est-ce que le pointeur `list' donné en argument à chacune de mes
     fonctions référence obligatoirement le 1er élément de la liste ?

   R Non, il est peut-être une bonne idée de revenir au début de la
     liste pour certaines fonctions demandées.


5. Q Est-ce que les fonctions my_dlist_nth() et my_dlist_nth_data()
     comptent à partir du noeud `list' donné en argument ou bien le
     noeud du début de liste ?

   R Vous devez compter à partir du début.


6. Q Est-ce que la fonction g_list_sort() trie les éléments en ordre
     croissant ou décroissant ?

   R En ordre croissant.


7. Q Quand je fais `gmake' la variable NAME = libdlist_`uname -m`-`uname -s`.a
     n'est pas affichée correctement.

   R Utilisez la fourberie indienne suivante :
     ARCH != uname -m
     SYST != uname -s
     NAME = libdlist_$(ARCH)-$(SYST).a

